#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Standard Libraries
import argparse
import itertools
import os
import signal
import sys
import time
import traceback
import multiprocessing
import re
import functools
import urllib.request
import hashlib
from datetime import datetime, timedelta

# Third-party Libraries
try:
    import re2 as re
except ImportError:
    import re
else:
    re.set_fallback_notification(re.FALLBACK_WARNING)

MIN = (3, 3)
if not sys.version_info >= MIN:
    raise EnvironmentError(
        f"Python version too low, required at least {'.'.join(map(str, MIN))}")

def download_and_verify_signatures():
    signatures_urls = [
        "https://cdn.barrahome.org/malware_finder/signatures.db",
        "https://cdn.barrahome.org/malware_finder/experimental.db"
    ]
    sha256_urls = [
        "https://cdn.barrahome.org/malware_finder/signatures.db.sha256",
        "https://cdn.barrahome.org/malware_finder/experimental.db.sha256"
    ]
    signature_files = [
        "signatures.db",
        "experimental.db"
    ]
    signatures = []

    # Verificar si los archivos existen en el directorio actual
    current_directory = os.path.dirname(os.path.abspath(__file__))
    current_signature_files = [
        os.path.join(current_directory, file_name) for file_name in signature_files
    ]

    for file_path in current_signature_files:
        if os.path.isfile(file_path):
            signatures.append(file_path)

    if not signatures:
        # Si los archivos no están en el directorio actual, intentar descargarlos
        for i in range(len(signature_files)):
            file_path = signature_files[i]
            url = signatures_urls[i]
            sha256_url = sha256_urls[i]

            try:
                urllib.request.urlretrieve(url, file_path)
                print(f"{file_path} downloaded successfully.")
                signatures.append(file_path)
            except urllib.error.URLError:
                print(f"Failed to download {file_path}. Please check the URL or try again later.")
                continue  # Pasar a la siguiente iteración sin ejecutar el código restante

            sha256_file = file_path + ".sha256"

            try:
                urllib.request.urlretrieve(sha256_url, sha256_file)
                print(f"SHA-256 file for {file_path} downloaded successfully.")
            except urllib.error.URLError:
                print(f"Failed to download the SHA-256 file for {file_path}. Please check the URL or try again later.")
                if os.path.isfile(sha256_file):
                    os.remove(sha256_file)
                continue  # Pasar a la siguiente iteración sin ejecutar el código restante

            with open(sha256_file, "r") as f:
                expected_hash = f.read().strip()

            with open(file_path, "rb") as f:
                data = f.read()
                calculated_hash = hashlib.sha256(data).hexdigest()

            if calculated_hash == expected_hash:
                print(f"Integrity verified for {file_path}. The file is not corrupted.")
            else:
                print(f"Integrity check failed for {file_path}. The file may be corrupted.")

    if not signatures:
        print("Error: No signature files found. Exiting...")
        sys.exit(1)

    return signatures


def load_signatures(signature_files):
    sigs.clear()
    for file_path in signature_files:
        with open(file_path, "r") as f:
            for line in f:
                sigs.append(re.compile(line))

def handle_sigint(sig, frame):
    print("\nExiting\n")
    raise SystemExit()

def scan_file(file_path, sigs, verbose, output_file):
    try:
        print(f"Scanning file: {file_path}")
        with open(file_path, "rb") as f:  # Abrir en modo binario
            content = f.read()
        content = content.decode(errors='ignore')  # Decodificar sin tener en cuenta los errores
        for sig in sigs:
            match = sig.search(content)
            if match:
                pattern = sig.pattern
                message = f"Found signature {pattern} in file: {file_path}" if verbose else f"Found signature in file: {file_path}"
                print(message)
                with open(output_file, "a") as out_f:
                    out_f.write(f"{file_path}\n")
                return True
        if verbose:
            print(f"No match found in file: {file_path}")
        return False
    except KeyboardInterrupt:
        print('Interrupted')
    except Exception as e:
        traceback.print_exc()
        return False

def scan_file_parallel(file_path, sigs, verbose, output_file):
    try:
        return scan_file(file_path, sigs, verbose, output_file)
    except KeyboardInterrupt:
        print('Interrupted')
    except Exception as e:
        traceback.print_exc()
        return False

def scan_directory(directory_path, extension, args):
    output_file = args.file if args.file else "found_files.txt"
    malware_count = 0
    if args.individual:
        if not os.path.isfile(directory_path):
            raise ValueError(f"{directory_path} is not a valid file")
        print(f"Scanning file {directory_path} for signatures")
        try:
            if scan_file(directory_path, sigs, args.verbose, output_file):
                malware_count += 1
        except Exception as e:
            traceback.print_exc()
        print(f"Found {malware_count} instances of malware in {directory_path}")
    else:
        print(f"Scanning directory {directory_path} and files with extension {extension}")
        file_paths = []
        for root, _, files in os.walk(directory_path):
            for file_name in files:
                if file_name.endswith(extension):
                    file_path = os.path.join(root, file_name)
                    if not os.path.islink(file_path):
                        file_paths.append(file_path)

        max_processes = max(1, multiprocessing.cpu_count() // 2)
        with multiprocessing.Pool(processes=max_processes) as pool:
            results = pool.starmap(
                scan_file_parallel, [(file_path, sigs, args.verbose, output_file) for file_path in file_paths])
        malware_count = sum(results)
        print(f"Found {malware_count} files with malware.")

def aggressive():
    sigs.clear()
    if args.aggressive:
        file_path = "/etc/barrahome/experimental.db"
        if os.path.isfile(file_path):
            try:
                with open(file_path, "rb") as f:
                    content = f.read()
                compiled_sigs = [re.compile(sig) for sig in sigs]
                for sig in compiled_sigs:
                    match = sig.search(content)
                    if match:
                        sigs.append(sig)
                        print(f"Added signature {sig.pattern} from {file_path}")
            except Exception as e:
                print(f"Failed to read signatures file: {file_path}")
                traceback.print_exc()
        else:
            print(f"Signatures file not found: {file_path}")    
#---------------------------------------------------------------------------------------------------------#
version = "2.0.1"
sigs = []
signatures = len(sigs)
autor = "Alberto Ferrer"
email = "albertof@barrahome.org"
url = "https://www.barrahome.org"
#---------------------------------------------------------------------------------------------------------#

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Scan a directory for files with suspicious signatures")
    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument("-i", "--individual", help="Path to individual file to scan")
    group.add_argument("-d", "--directory", help="Path to directory to scan")
    parser.add_argument("-v", "--verbose", help="increase output verbosity", action="store_true")
    parser.add_argument("-f", "--file", help="output file name")
    parser.add_argument("-e", "--extension", default="php", help="File extension to scan for")
    parser.add_argument("-a", "--aggressive", help="Aggressive Mode (Experimental detection)", action="store_true")
    args = parser.parse_args()
    if args.aggressive:
        aggressive()
    signal.signal(signal.SIGINT, handle_sigint)
    signature_files = download_and_verify_signatures()
    load_signatures(signature_files)
    signatures = len(sigs) 
    banner = f"""
-----------------------------------------------------------------------------------
Malware Finder {version}
Signatures Loaded: {signatures}
-----------------------------------------------------------------------------------
Autor: {autor}
Email: {email}
URL: {url}
"""
    print(banner)
    if args.individual:
        scan_directory(args.individual, args.extension, args)
    else:
        scan_directory(args.directory, args.extension, args)